{"version":3,"sources":["redux/actions.js","redux/reducers.js","redux/store.js","components/contactForm/contactForm.js","components/filter/filter.js","components/contactList/contactList.js","Phonebook.js","index.js"],"names":["deleteContact","createAction","filterChange","formSubmit","contactsReducer","createReducer","state","payload","filter","contact","id","filterReducer","_","action","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","rootReducer","combineReducers","contactsItem","store","configureStore","reducer","persistReducer","devtools","process","persistor","persistStore","ContactForm","onFormSubmit","useState","name","setName","number","setNumber","resetForm","className","onSubmit","evt","preventDefault","newId","uuidv4","autoComplete","type","value","onChange","e","target","connect","dispatch","filterInput","currentTarget","filterItems","contacts","toLowerCase","includes","handleBtnDelete","length","map","item","onClick","data","find","alert","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"+UAEMA,EAAgBC,YAAa,sBAC7BC,EAAeD,YAAa,qBAC5BE,EAAaF,YAAa,mBCD1BG,EAAkBC,YAAc,IAAD,mBAClCF,GAAa,SAACG,EAAD,YAAUC,SAAV,mBAAqCD,OADhB,cAElCN,GAAgB,SAACM,EAAD,OAAUC,EAAV,EAAUA,QAAV,OACfD,EAAME,QAAO,SAAAC,GAAO,OAAIA,EAAQC,KAAOH,QAHN,IAM/BI,EAAgBN,YAAc,GAAD,eAChCH,GAAe,SAACU,EAAGC,GAAJ,OAAeA,EAAON,YCSlCO,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAGIC,EAAgB,CACpBC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGRC,EAAcC,YAAgB,CAClCC,aAAc3B,EACdI,OAAQG,IAGJqB,EAAQC,YAAe,CAC3BC,QAASC,YAAeV,EAAeI,GAEvCO,UAAUC,EACVvB,eAGIwB,EAAYC,YAAaP,G,8BCUhBQ,MAnDf,YAAwC,IAAjBC,EAAgB,EAAhBA,aAAgB,EACbC,mBAAS,IADI,mBAC9BC,EAD8B,KACxBC,EADwB,OAETF,mBAAS,IAFA,mBAE9BG,EAF8B,KAEtBC,EAFsB,KAY/BC,EAAY,WAChBH,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAME,UAAU,OAAOC,SAdJ,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAQC,cAEdZ,EAAa,CAAEE,OAAME,SAAQnC,GAAI0C,IACjCL,KAS+CO,aAAa,MAA5D,UACE,wBAAON,UAAU,QAAjB,iBAEE,uBACEA,UAAU,kBACVL,KAAK,OACLY,KAAK,OACLC,MAAOb,EACPc,SAAU,SAAAC,GAAC,OAAId,EAAQc,EAAEC,OAAOH,aAGpC,wBAAOR,UAAU,QAAjB,mBAEE,uBACEA,UAAU,QACVL,KAAK,SACLY,KAAK,SACLC,MAAOX,EACPY,SAAU,SAAAC,GAAC,OAAIZ,EAAUY,EAAEC,OAAOH,aAItC,wBAAQR,UAAU,SAASO,KAAK,SAAhC,6BClBN,IAIeK,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCC,YAAa,SAAAtD,GAAM,OAAIqD,EAAS3D,EAAaM,QAGhCoD,EA1Bf,YAAkC,IAAhBE,EAAe,EAAfA,YAKhB,OACE,wBAAOd,UAAU,QAAjB,kCAEE,uBACEA,UAAU,QACVL,KAAK,SACLY,KAAK,OACLE,SAXc,SAAAC,GAClBI,EAAYJ,EAAEK,cAAcP,gB,MC2BhC,IAAMQ,EAAc,SAACC,EAAUzD,GAC7B,OAAOyD,EAASzD,QAAO,SAAAC,GAAO,OAC5BA,EAAQkC,KAAKuB,cAAcC,SAAS3D,EAAO0D,mBAkBhCN,eAdS,SAAC,GAAD,IAAG7B,EAAH,EAAGA,aAAcvB,EAAjB,EAAiBA,OAAjB,MAA+B,CACrDyD,SAAUD,EAAYjC,EAAcvB,OAGX,SAAAqD,GAAQ,MAAK,CACtCO,gBAAiB,SAAA1D,GAAE,OAAImD,EAAS7D,EAAcU,QASjCkD,EAhDf,YAAqD,IAA9BK,EAA6B,EAA7BA,SAAUG,EAAmB,EAAnBA,gBAC/B,OACE,oBAAIpB,UAAU,eAAd,SACuB,IAApBiB,EAASI,OACR,mBAAGrB,UAAU,qBAAb,oDAIAiB,EAASK,KAAI,SAAAC,GAAI,OACf,qBAAIvB,UAAU,eAAd,UACE,oBAAGA,UAAU,qBAAb,UACGuB,EAAK5B,KADR,KAEE,sBAAMK,UAAU,uBAAhB,SAAwCuB,EAAK1B,YAE/C,wBACEG,UAAU,YACVO,KAAK,SACLiB,QAAS,kBAAMJ,EAAgBG,EAAK7D,KAHtC,sBALgC6D,EAAK7D,Y,MCWjD,IASekD,eATS,SAAAtD,GAAK,MAAK,CAChC2D,SAAU3D,EAAMyB,aAChBvB,OAAQF,EAAME,WAGW,SAAAqD,GAAQ,MAAK,CACtC1D,WAAY,SAAAM,GAAO,OAAIoD,EAAS1D,EAAWM,QAG9BmD,EA5Bf,YAA8C,IAAzBK,EAAwB,EAAxBA,SAAU9D,EAAc,EAAdA,WAQ7B,OACE,sBAAK6C,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,uBACA,cAAC,EAAD,CAAaP,aAVQ,SAAAgC,GAAI,OAC3BR,EAASS,MACP,SAAAjE,GAAO,OAAIA,EAAQkC,KAAKuB,gBAAkBO,EAAK9B,KAAKuB,iBAElDS,MAAMF,EAAK9B,KAAO,2BAClBxC,EAAWsE,MAMb,oBAAIzB,UAAU,iBAAd,sBACA,cAAC,EAAD,IACA,cAAC,EAAD,UCdN4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU9C,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAa+C,QAAS,KAAMzC,UAAWA,EAAvC,SACE,cAAC,EAAD,UAIN0C,SAASC,eAAe,W","file":"static/js/main.14c6bb49.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst deleteContact = createAction('form/deleteContact');\r\nconst filterChange = createAction('form/filterChange');\r\nconst formSubmit = createAction('form/formSubmit');\r\n\r\nexport { deleteContact, filterChange, formSubmit };\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { deleteContact, formSubmit, filterChange } from './actions';\r\n\r\nconst contactsReducer = createReducer([], {\r\n  [formSubmit]: (state, { payload }) => [payload, ...state],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterChange]: (_, action) => action.payload,\r\n});\r\n\r\nexport { contactsReducer, filterReducer };\r\n","import {\r\n  combineReducers,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { contactsReducer, filterReducer } from './reducers';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contactsItem: contactsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: persistReducer(persistConfig, rootReducer),\r\n\r\n  devtools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport './contactForm.css';\r\n\r\nfunction ContactForm({ onFormSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n    const newId = uuidv4();\r\n\r\n    onFormSubmit({ name, number, id: newId });\r\n    resetForm();\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n      <label className=\"label\">\r\n        Name\r\n        <input\r\n          className=\"input inputName\"\r\n          name=\"name\"\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={e => setName(e.target.value)}\r\n        />\r\n      </label>\r\n      <label className=\"label\">\r\n        Number\r\n        <input\r\n          className=\"input\"\r\n          name=\"number\"\r\n          type=\"number\"\r\n          value={number}\r\n          onChange={e => setNumber(e.target.value)}\r\n        />\r\n      </label>\r\n\r\n      <button className=\"btnAdd\" type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onFormSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import { connect } from 'react-redux';\r\nimport { filterChange } from '../../redux/actions';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Filter({ filterInput }) {\r\n  const handleInput = e => {\r\n    filterInput(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <label className=\"label\">\r\n      Find contacts by name\r\n      <input\r\n        className=\"input\"\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        onChange={handleInput}\r\n      ></input>\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filterInput: PropTypes.func,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  filterInput: filter => dispatch(filterChange(filter)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport { deleteContact } from '../../redux/actions';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './contactList.css';\r\n\r\nfunction ContactList({ contacts, handleBtnDelete }) {\r\n  return (\r\n    <ul className=\"contact-list\">\r\n      {contacts.length === 0 ? (\r\n        <p className=\"contact-item__text\">\r\n          There are no contacts on your list yet\r\n        </p>\r\n      ) : (\r\n        contacts.map(item => (\r\n          <li className=\"contact-item\" key={item.id}>\r\n            <p className=\"contact-item__text\">\r\n              {item.name} :\r\n              <span className=\"contact-item__number\">{item.number}</span>\r\n            </p>\r\n            <button\r\n              className=\"btnDelete\"\r\n              type=\"button\"\r\n              onClick={() => handleBtnDelete(item.id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))\r\n      )}\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst filterItems = (contacts, filter) => {\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contactsItem, filter }) => ({\r\n  contacts: filterItems(contactsItem, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  handleBtnDelete: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  filter: PropTypes.string,\r\n  deleteContact: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { connect } from 'react-redux';\r\nimport { formSubmit } from './redux/actions';\r\nimport ContactForm from './components/contactForm/contactForm';\r\nimport Filter from './components/filter/filter';\r\nimport ContactList from './components/contactList/contactList';\r\nimport './Phonebook.css';\r\n\r\nfunction Phonebook({ contacts, formSubmit }) {\r\n  const handleFormSubmit = data =>\r\n    contacts.find(\r\n      contact => contact.name.toLowerCase() === data.name.toLowerCase(),\r\n    )\r\n      ? alert(data.name + ' is already in contacts')\r\n      : formSubmit(data);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"title\">phonebook</h1>\r\n      <ContactForm onFormSubmit={handleFormSubmit} />\r\n      <h2 className=\"title-contacts\">contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contactsItem,\r\n  filter: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  formSubmit: contact => dispatch(formSubmit(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport Phonebook from './Phonebook';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Phonebook />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}